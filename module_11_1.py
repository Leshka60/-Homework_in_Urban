from requests import get, ConnectionError
import matplotlib.pyplot as plt
import pandas as pd


'''Библиотека Requests для Python позволяет работать с HTTP-запросами любого уровня сложности,
используя простой синтаксис. Это помогает не тратить время на написание кода, а быстро взаимодействовать с серверами.
Python Requests — это библиотека, которая создана для быстрой и простой работы с запросами.'''

params = {"ll": "37.677751,55.757718", "spn": "0.016457,0.00619", "l": "map"}
try:
    response = get("https://static-maps.yandex.ru/1.x/", params=params)
except ConnectionError:
    print("Проверьте подключение к сети.")
else:
    with open("map.png", "wb") as file:
        file.write(response.content)


'''Matplotlib — популярная Python-библиотека для визуализации данных. 
Она используется для создания любых видов графиков: линейных, круговых диаграмм, построчных гистограмм и 
других — в зависимости от задач. Библиотека Matplotlib — пакет для визуализации данных в Python, который позволяет 
работать с данными на нескольких уровнях:
- с помощью модуля Pyplot, который рассматривает график как единое целое;
- через объектно-ориентированный интерфейс, когда каждая фигура или её часть является отдельным объектом, — это 
позволяет выборочно менять их свойства и отображение.
Например, столбчатая диаграмма:'''

x = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май']
y = [2, 4, 3, 1, 7]

plt.bar(x, y, label='Величина прибыли')  # Параметр label позволяет задать название величины для легенды
plt.xlabel('Месяц года')
plt.ylabel('Прибыль, в млн руб.')
plt.title('Пример столбчатой диаграммы')
plt.legend()
plt.show()


'''Pandas — это библиотека на Python, предназначенная для обработки и анализа структурированных табличных данных. 
С её помощью можно фильтровать, сортировать, агрегировать и преобразовывать данные, а также интегрироваться с различными
 источниками для чтения и записи. Благодаря такому богатому функционалу, эффективности и удобству использования, 
 Pandas — один из наиболее популярных инструментов в области анализа данных.
 Данные в Pandas представлены в двух видах: Series и DataFrame.
 Series — это объект, который похож на одномерный массив и может содержать любые типы данных.'''

series_example = pd.Series([4, 7, -5, 3])  # Создаём объект Series, содержащий числа.
print(series_example)  # Выводим объект на экран.

'''DataFrame — основной тип данных в Pandas. Его можно представить в виде обычной таблицы с любым количеством столбцов 
и строк. Внутри ячеек такой «таблицы» могут быть данные самого разного типа: числовые, булевы, строковые и так далее.'''

city = {'Город': ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург'],
        'Год основания': [1147, 1703, 1893, 1723],
        'Население': [11.9, 4.9, 1.5, 1.4]}  # Создаём словарь с нужной информацией о городах.
df = pd.DataFrame(city)  # Превращаем словарь в DataFrame, используя стандартный метод библиотеки.
print(df)  # Выводим DataFrame на экран.
